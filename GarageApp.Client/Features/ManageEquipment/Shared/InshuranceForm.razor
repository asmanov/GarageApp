@inject DatabaseService DatabaseService

<EditForm Model="_inshurance" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />
    <MudCard Style="margin-left: 20px; margin-right: 20px; background-color: lightskyblue"
             Elevation="100">
        <MudCardHeader Typo="Typo.h1"><b>Add inspection info</b></MudCardHeader>
        <MudCardContent>
            <FormSection Title="Техничний огляд" HelpText="Вкажить дату проведення техничного огляда">
                <MudSelect Variant="Variant.Outlined" Style="margin-bottom: 20px;" T="string" @bind-bind-Value="_inshurance.Type" Label="Оберить тип страховки">
                    <MudSelectItem Value="@("Зелена карта")">Зелена карта</MudSelectItem>
                    <MudSelectItem Value="@("ОСЦПВ")">ОСЦПВ</MudSelectItem>
                    <MudSelectItem Value="@("КАСКО")">КАСКО</MudSelectItem>
                </MudSelect>
                <MudNumericField @bind-Value="_inshurance.Nomber" Variant="Variant.Outlined" Label="Номер страховки"></MudNumericField>
                <MudDatePicker Style="margin-bottom: 20px;" PickerVariant="PickerVariant.Dialog" Rounded="true" Elevation="12" Label="Start date" @bind-Date="DateStart" Variant="Variant.Outlined" />
                <MudDatePicker Style="margin-bottom: 20px;" PickerVariant="PickerVariant.Dialog" Rounded="true" Elevation="12" Label="Start date" @bind-Date="DateEnd" Variant="Variant.Outlined" />
                <MudSelect T="int" @bind-Value="_inshurance.Track" Variant="Variant.Outlined" Label="Регістрціоний номер авто">
                    @if (GarageList?.Any() == true)
                    {
                        @foreach (var item in GarageList)
                        {
                            <MudSelectItem T="int" Value="@item.Id">@item.RegistrationNumber</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudNumericField @bind-Value="_inshurance.Cost" Variant="Variant.Outlined" Label="Вартість страховки"></MudNumericField>
            </FormSection>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Reset"
                       Variant="Variant.Filled" Color="Color.Error"
                       OnClick="@(() => _inshurance = new Inshurance())">Reset</MudButton>
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled" Color="Color.Info" Class="ml-auto">Submit</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private Inshurance _inshurance = new Inshurance();
    private DateTime? DateStart
    {
        get => _inshurance.Start != default ? _inshurance.Start.ToDateTime(TimeOnly.MinValue) : null;
        set => _inshurance.Start = value.HasValue ? DateOnly.FromDateTime(value.Value) : default;
    }
    private DateTime? DateEnd
    {
        get => _inshurance.End != default ? _inshurance.End.ToDateTime(TimeOnly.MinValue) : null;
        set => _inshurance.End = value.HasValue ? DateOnly.FromDateTime(value.Value) : default;
    }

    public IEnumerable<Garage> GarageList { get; set; } = new List<Garage>();

    [Parameter, EditorRequired]
    public Func<Inshurance, Task> OnSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {

        GarageList = await DatabaseService.FromS<Garage>();
    }

    public void ResetForm()
    {
        _inshurance = new Inshurance();
        StateHasChanged();
    }

    private async Task SubmitForm() => await OnSubmit(_inshurance);
}
