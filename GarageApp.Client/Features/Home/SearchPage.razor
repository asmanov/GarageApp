@page "/search/{TextValue}"
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Search Equipment - Garage</PageTitle>

<MudNavMenu>
    <MudNavLink Href="/GarageApp/">Home</MudNavLink>
</MudNavMenu>

@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else{
    <EquipDetails Equipment="_selectedEquip" />
    <MudGrid Justify="Justify.SpaceEvenly">
        @foreach (var equip in _searchResults)
        {
            <EquipCard Equipment="equip" OnSelected="HandleEquipSelected" />
        }
    </MudGrid>
}

<h3>Search results</h3>

@code {
    private IEnumerable<Equipment>? _searchResults;
    private Equipment? _selectedEquip;

    [Parameter]
    public string TextValue { get; set; } = default!;
    protected override async Task OnInitializedAsync(){
        try
        {
            var allEquips = await Http.GetFromJsonAsync<IEnumerable<Equipment>>("Equipment/equip-data.json");
            _searchResults = allEquips!
            .Where(x => x.BrandName.Contains(TextValue, StringComparison.CurrentCultureIgnoreCase) || x.ModelName.Contains(TextValue, StringComparison.CurrentCultureIgnoreCase));
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem Loading equipment data: {ex.Message}");
        }
    }

    private void HandleEquipSelected(Equipment equipment) => _selectedEquip = equipment;
}
